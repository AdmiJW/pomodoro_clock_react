{"version":3,"sources":["Sounds/Alarm1.wav","Sounds/CuckooClock.wav","Sounds/ColdSynth.wav","Redux/Actions/ActionType.js","Redux/Actions/Actions.js","StatesOfTimer.js","Redux/Reducer/RootReducer.js","Redux/Store/Store.js","Components/MotivationQuote.js","PadZeroes.js","Components/Note.js","Components/Timer.js","Components/ConfigWin.js","Components/Main.js","index.js"],"names":["ActionType","PLAY_PAUSE_CLICK","RESET_CLICK","ALARM_CHANGED","ALARM_VOL_CHANGED","BREAK_LEN_CHANGED","SESSION_LEN_CHANGED","QUOTE_FETCHING","QUOTE_FETCHED","CHANGE_SESSION","DECREMENT_TIME","Actions","playPauseClick","type","resetClick","alarmChanged","alarmID","payload","alarmVolChanged","alarmVol","breakLenChanged","newBreakLength","sessionLenChanged","newSessionLength","quoteFetching","quoteFetched","quoteJSON","changeSession","decrementTime","statesOfTimer","SESSION","BREAK","INIT","sound01","name","url","require","default","sound02","sound03","window","localStorage","setItem","JSON","stringify","audioElem","document","createElement","id","getElementsByTagName","appendChild","volume","src","parse","getItem","initialState","timerState","StatesOfTimer","timerMin","timerSec","isMiddleColonShown","intervalObject","isPaused","isFetchingQuote","quote","alarmHTML","alarmName","alarm_volume","break_length","session_length","setUpInterval","setInterval","store","dispatch","rootReducer","state","action","clearInterval","alarmJSON","Object","assign","play","createStore","RootReducer","MotivationQuote","this","props","fetchingQuote","fetchedQuote","fetchQuoteFunc","fetch","then","e","json","quoteDiv","$","content","length","addClass","removeClass","catch","err","console","log","quoteText","quoteAuthor","classNameMotiv","quoteTxt","author","className","React","Component","connect","padZeroes","time","Note","breakLength","sessionLength","Timer","playPauseBtnClicked","bind","resetBtnClicked","click","playPauseClicked","selectHTML","value","resetClicked","sec","isColonShown","playPauseBtnClass","onClick","createOptionHTML","audioName","newID","ConfigWin","volumeChanged","alarmSoundChanged","alarmUploaded","alarmDelete","alarmPlay","on","i","key","audioJSON","entry","optionHTML","append","target","file","files","startsWith","size","alert","fr","FileReader","onload","Number","children","audioJSONStr","result","appendTo","readAsDataURL","ID","remove","removeItem","alarmJSON1","alarmJSON2","alarmJSON3","htmlFor","defaultValue","onChange","accept","trigger","Math","round","min","max","step","Main","ReactDOM","render","StrictMode","Store","getElementById"],"mappings":"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","file":"static/js/main.f3e8b496.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Alarm1.e908ad88.wav\";","export default __webpack_public_path__ + \"static/media/CuckooClock.e8dcf392.wav\";","export default __webpack_public_path__ + \"static/media/ColdSynth.1c4ffdcf.wav\";","\r\n\r\nconst ActionType = {\r\n    PLAY_PAUSE_CLICK: 'PLAY_PAUSE_CLICK',\r\n    RESET_CLICK: 'RESET_CLICK',\r\n\r\n    ALARM_CHANGED: 'ALARM_CHANGED',\r\n    ALARM_VOL_CHANGED: 'ALARM_VOL_CHANGED',\r\n\r\n    BREAK_LEN_CHANGED: 'BREAK_LEN_CHANGED',\r\n    SESSION_LEN_CHANGED: 'SESSION_LEN_CHANGED',\r\n\r\n    QUOTE_FETCHING: 'QUOTE_FETCHING',\r\n    QUOTE_FETCHED: 'QUOTE_FETCHED',\r\n\r\n    CHANGE_SESSION: 'CHANGE_SESSION',\r\n    DECREMENT_TIME: 'DECREMENT_TIME'\r\n}\r\n\r\nexport default ActionType;","import ActionType from './ActionType';\r\n\r\n\r\n\r\nconst Actions = {\r\n    playPauseClick: () => ({\r\n        type: ActionType.PLAY_PAUSE_CLICK\r\n    }),\r\n    resetClick: () => ({\r\n        type: ActionType.RESET_CLICK\r\n    }),\r\n\r\n\r\n    //  0, 1, and 2 are default AlarmID, which ID is used to access them at LOCAL STORAGE\r\n    alarmChanged: ( alarmID ) => ({\r\n        type: ActionType.ALARM_CHANGED,\r\n        payload: alarmID\r\n    }),\r\n    alarmVolChanged: (alarmVol) => ({\r\n        type: ActionType.ALARM_VOL_CHANGED,\r\n        payload: alarmVol\r\n    }),\r\n\r\n    breakLenChanged: (newBreakLength) => ({\r\n        type: ActionType.BREAK_LEN_CHANGED,\r\n        payload: newBreakLength\r\n    }),\r\n    sessionLenChanged: (newSessionLength) => ({\r\n        type: ActionType.SESSION_LEN_CHANGED,\r\n        payload: newSessionLength\r\n    }),\r\n\r\n    quoteFetching: () => ({\r\n        type: ActionType.QUOTE_FETCHING\r\n    }),\r\n    quoteFetched: (quoteJSON) => ({\r\n        type: ActionType.QUOTE_FETCHED,\r\n        payload: quoteJSON\r\n    }),\r\n\r\n\r\n    changeSession: () => ({\r\n        type: ActionType.CHANGE_SESSION\r\n    }),\r\n    decrementTime: () => ({\r\n        type: ActionType.DECREMENT_TIME\r\n    })\r\n}\r\n\r\nexport default Actions;","//  THe fixed states of timer. Think this as Enum\r\n\r\nconst statesOfTimer = {\r\n    SESSION: \"Session\",\r\n    BREAK: \"Break\",\r\n    INIT: \"Initialization\"\r\n}\r\n\r\nexport default statesOfTimer;","\r\nimport ActionType from '../Actions/ActionType';\r\n\r\nimport Actions from '../Actions/Actions';\r\n\r\nimport StatesOfTimer from '../../StatesOfTimer';\r\nimport store from '../Store/Store';\r\n\r\n// import RingTone1 from '../../Resources/Alarm1.wav';\r\n// import CuckooClock from '../../Resources/CuckooClock.wav';\r\n// import ColdSynth from '../../Resources/ColdSynth.wav';\r\n\r\nconst alarm1URL = require('../../Sounds/Alarm1.wav').default;\r\nconst alarm2URL = require('../../Sounds/CuckooClock.wav').default;\r\nconst alarm3URL = require('../../Sounds/ColdSynth.wav').default;\r\n\r\n//  Set up Default Sounds in Local Storage\r\n//  The alarms are stored in stringified JSON object, in the form of { name: alarmName, url: alarmURL }\r\n//  Every time to access the alarms, shall use JSON.parse() \r\nconst sound01 = { name: 'Melody', url: alarm1URL };\r\nconst sound02 = { name: 'Cuckoo Clock', url: alarm2URL };\r\nconst sound03 = { name: 'Cold Synth', url: alarm3URL };\r\n\r\nwindow.localStorage.setItem(0, JSON.stringify( sound01 ) );\r\nwindow.localStorage.setItem(1, JSON.stringify( sound02 ) );\r\nwindow.localStorage.setItem(2, JSON.stringify( sound03 ) );\r\n\r\n//  The HTML Audio Element. Its source shall be loaded with alarm sound, which is played when timer counts to 0\r\nconst audioElem = document.createElement('audio');\r\naudioElem.id = 'beep';      //  To met the requirements of FreeCodeCamp\r\ndocument.getElementsByTagName('body')[0].appendChild(audioElem);\r\n\r\naudioElem.volume = 0.5;\r\n\r\n//  Audio HTML element is initialized with the first Default Alarm Sound\r\naudioElem.src = JSON.parse(window.localStorage.getItem(0) ).url;\r\n\r\n\r\n\r\nconst initialState = {\r\n    timerState: StatesOfTimer.INIT,        //   INIT, SESSION or BREAK\r\n    timerMin: 25,                          //   The MINUTE that shall be shown on the timer\r\n    timerSec: 0,                           //   The SECOND that shall be shown on the timer\r\n    isMiddleColonShown: true,              //   Every 500ms, the colon will dissapear, then reappear, effect of digital clock\r\n    intervalObject: null,                  //   The interval object. Use this to clearInterval\r\n    isPaused: true,                        \r\n    \r\n    isFetchingQuote: false,                 //  True if the motivationDiv is fetching quote. Will show the spinner\r\n    quote: null,                            //  Currently loaded quote. A JS object\r\n\r\n    alarmHTML: audioElem,                   //  The audio HTML element. Use this to set src and play()\r\n    alarmName: JSON.parse(window.localStorage.getItem(0) ).name,       //   The alarm name. Initialized to the default first Alarm Name\r\n    alarm_volume: 0.5,                      //  Volume set to the audio HTML element\r\n\r\n    break_length: 5,                    //  The length of Break in minutes\r\n    session_length: 25                  //  The length of Session in minutes\r\n}\r\n\r\n\r\n//  A function which will set up the interval object which fires the DECREMENT_TIME action every 500ms\r\n//  Will return the interval object itself to be set in state, which can be used in clearInterval later\r\nfunction setUpInterval() {\r\n    return window.setInterval(()=> {\r\n        store.dispatch( Actions.decrementTime() );\r\n    }, 500);\r\n}\r\n\r\n\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        //  Play Pause button is clicked.\r\n        case ActionType.PLAY_PAUSE_CLICK:\r\n            if ( state.timerState === StatesOfTimer.INIT )\r\n                return {...state, isPaused: false, timerState: StatesOfTimer.SESSION, intervalObject: setUpInterval() };\r\n            if (!state.isPaused) {\r\n                window.clearInterval( state.intervalObject );\r\n                return {...state, isPaused: !state.isPaused, intervalObject: null };\r\n            }\r\n            return {...state, isPaused: !state.isPaused, intervalObject: setUpInterval() };\r\n        //  Reset button is clicked.\r\n        case ActionType.RESET_CLICK:\r\n            window.clearInterval( state.intervalObject );\r\n            return {...initialState, quote: state.quote };\r\n            \r\n        //  Alarm Sound is changed from the select HTML. Set the audio HTML src to the alarm, then update state\r\n        case ActionType.ALARM_CHANGED:\r\n            const alarmID = action.payload;\r\n            const alarmJSON = JSON.parse( window.localStorage.getItem(alarmID) );\r\n            state.alarmHTML.src = alarmJSON.url;\r\n            return Object.assign( {}, state, { alarmName: alarmJSON.name } );\r\n        //  Alarm Volume is changed\r\n        case ActionType.ALARM_VOL_CHANGED:\r\n            state.alarmHTML.volume = action.payload;\r\n            return Object.assign( {}, state, {alarm_volume: action.payload} );\r\n\r\n        //  Break length is changed.\r\n        case ActionType.BREAK_LEN_CHANGED:\r\n            return Object.assign( {}, state, {break_length: action.payload} );\r\n        //  Session length is changed.\r\n        case ActionType.SESSION_LEN_CHANGED:\r\n            if ( state.timerState === StatesOfTimer.INIT )\r\n                return { ...state, session_length: action.payload, timerMin: action.payload };\r\n            return Object.assign( {}, state, {session_length: action.payload} );\r\n\r\n        //  The quote is currently being fetched. Show SPinner\r\n        case ActionType.QUOTE_FETCHING:\r\n            return {...state, isFetchingQuote: true, quote: null};\r\n        //  The quote is fetched. Update the state's quote\r\n        case ActionType.QUOTE_FETCHED:\r\n            return {...state, isFetchingQuote: false, quote: action.payload};\r\n\r\n\r\n        //  Every 500ms this is called.\r\n        //  If the colon is shown, then just don't show the middle colon.\r\n        //  Else if the colon is not shown, it's time to tick down one seconds\r\n        case ActionType.DECREMENT_TIME:\r\n            if (state.isMiddleColonShown )\r\n                return {...state, isMiddleColonShown: false};\r\n            else {\r\n                //  Seconds is still larger than 0\r\n                if (state.timerSec > 0)\r\n                    return {...state, isMiddleColonShown: true, timerSec: state.timerSec - 1};\r\n                //  Seconds is 0, Minutes is still larger than 0\r\n                else if (state.timerMin > 0)\r\n                    return {...state, isMiddleColonShown: true, timerMin: state.timerMin - 1, timerSec: 59};\r\n                //  The time is 00:00. Change Session now\r\n                else {\r\n                    state.alarmHTML.play();\r\n                    if (state.timerState === StatesOfTimer.SESSION)\r\n                        return {...state, isMiddleColonShown: true, timerMin: state.break_length, timerSec: 0,\r\n                            timerState: StatesOfTimer.BREAK };\r\n                    else\r\n                        return {...state, isMiddleColonShown: true, timerMin: state.session_length, timerSec: 0,\r\n                            timerState: StatesOfTimer.SESSION };\r\n                }\r\n            }\r\n\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\n\r\nimport RootReducer from '../Reducer/RootReducer';\r\n\r\n//  REMOVE CHROME EXTENSION ON BUILD!\r\nconst store = createStore( RootReducer );\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Actions from '../Redux/Actions/Actions';\r\nimport $ from 'jquery';\r\n\r\n //  Time interval to fetch quotes\r\nconst QUOTE_FETCH_TIMER = 60000;   \r\n\r\nclass MotivationQuote extends React.Component {\r\n\r\n    //  As soon as this component mounts, begin the interval timer to fetch quote and update\r\n    componentDidMount() {\r\n        const { fetchingQuote, fetchedQuote } = this.props;\r\n\r\n        const target = 'https://api.quotable.io/random';\r\n\r\n        const fetchQuoteFunc = () => {\r\n            fetchingQuote();        // Dispatch action to show spinner\r\n\r\n            fetch(target)\r\n            .then(e => e.json() )\r\n            .then(quoteJSON => {\r\n                const quoteDiv = $('#motiv-quote');\r\n                if (quoteJSON.content.length >= 130) {    //  If the quote is large text, append class lg-quote\r\n                    quoteDiv.addClass('lg-quote');\r\n                } else {\r\n                    quoteDiv.removeClass('lg-quote');\r\n                }\r\n\r\n                fetchedQuote(quoteJSON);        //  Dispatch the newly fetched Quote to update store\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                fetchedQuote({              //  In case of failure, dispatch a fake quote displaying error message\r\n                    quoteText: \"Quote Fetching Failed\",\r\n                    quoteAuthor: \"\"\r\n                });\r\n            });\r\n        }\r\n\r\n        //  When the component just newly mounted, immediately start fetching one new quote\r\n        fetchQuoteFunc();\r\n\r\n        //  Fetch the quote in fixed intervals\r\n        window.setInterval( ()=> {\r\n            fetchQuoteFunc();\r\n        }, QUOTE_FETCH_TIMER);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { quote } = this.props;\r\n\r\n        //  If there is no quote, apply the class to show the spinner\r\n        const classNameMotiv = 'motiv' + ( (!quote)? ' loading': '');\r\n\r\n        const quoteTxt = quote? quote.content: '';\r\n        const quoteAuthor = quote? quote.author === ''? 'Anonymous': quote.author: '';\r\n\r\n        return (\r\n            <div className={ classNameMotiv } id='motiv'>\r\n                <i className=\"las la-spinner la-5x\" id='spinner'></i>\r\n                <p className='motiv-quote' id='motiv-quote'>{ quoteTxt }</p>\r\n                <footer className='motiv-cite' id='motiv-cite'>{ quoteAuthor }</footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//==========================================\r\n//  PROPTYPES AND MAP TO PROPS\r\n//==========================================\r\nMotivationQuote.propTypes = {\r\n    fetchingQuote: PropTypes.func.isRequired,\r\n    fetchedQuote: PropTypes.func.isRequired,\r\n\r\n    quote: PropTypes.object\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        fetchingQuote: () => {\r\n            dispatch( Actions.quoteFetching() );\r\n        },\r\n        fetchedQuote: (quoteJSON) => {\r\n            dispatch ( Actions.quoteFetched(quoteJSON) );\r\n        }\r\n    };\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        quote: store.quote\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MotivationQuote);","//  Just a simple function which pads a single digit number to 2 digit with 0.\r\n\r\nexport default function padZeroes(time) {\r\n    return (time < 10? '0': '') + time;\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport padZeroes from '../PadZeroes';\r\n\r\nclass Note extends React.Component {\r\n\r\n    render() {\r\n        const { breakLength, sessionLength, alarmName } = this.props;\r\n\r\n        return (\r\n        //  JSX ==========================\r\n        <div className='note-div'>\r\n\r\n            <div className='note' id='note'>\r\n\r\n                <section className='note-section' id='note-section-break'>\r\n                    <h3 className='note-label' id='note-break-label'>Break Length</h3>\r\n                    <p className='note-break' id='note-break'> { `${padZeroes(breakLength)}:00` } </p>\r\n                </section>\r\n\r\n                <section className='note-section' id='note-section-session'>\r\n                    <h3 className='note-label' id='note-session-label'>Session Length</h3>\r\n                    <p className='note-break' id='note-break'>{ `${padZeroes(sessionLength)}:00`} </p>\r\n                </section>\r\n\r\n                <section className='note-section' id='note-section-alarm'>\r\n                    <h3 className='note-label' id='note-alarm-label'>Alarm</h3>\r\n                    <p className='note-alarm' id='note-alarm'> { alarmName } </p>\r\n                </section>\r\n            </div>\r\n            \r\n            <div className='note-bg' id='note-bg'></div>\r\n        </div>\r\n        //  ==============================\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n//==========================================\r\n//  PROPTYPES AND MAP TO PROPS\r\n//==========================================\r\n\r\nNote.propTypes = {\r\n    breakLength: PropTypes.number.isRequired,\r\n    sessionLength: PropTypes.number.isRequired,\r\n    alarmName: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        breakLength: store.break_length,\r\n        sessionLength: store.session_length,\r\n        alarmName: store.alarmName\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Note);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport $ from 'jquery';\r\n\r\nimport Actions from '../Redux/Actions/Actions';\r\nimport padZeroes from '../PadZeroes';\r\n\r\n\r\n\r\nfunction getTime(min, sec, isColonShown) {\r\n    return `${padZeroes(min)}${isColonShown? ':': ' '}${padZeroes(sec)}`\r\n}\r\n\r\n\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.playPauseBtnClicked = this.playPauseBtnClicked.bind(this);\r\n        this.resetBtnClicked = this.resetBtnClicked.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        $('#timer-settings').click( ()=> {\r\n            $('#config').addClass('opened');\r\n        });\r\n    }\r\n\r\n    playPauseBtnClicked() {\r\n        this.props.playPauseClicked();\r\n    }\r\n\r\n    resetBtnClicked() {\r\n        const selectHTML = $('#alarm-sound');\r\n        const { alarmChanged } = this.props;\r\n\r\n        //  Change the selected alarm sound to the first one, preloaded alarm sound\r\n        alarmChanged(0);\r\n        selectHTML[0].value = \"0\";\r\n        this.props.resetClicked();\r\n    }\r\n\r\n\r\n    render() {\r\n        \r\n        const { timerState, timerMin, timerSec, isMiddleColonShown, isPaused } = this.props;\r\n\r\n        //  If is paused, apply the play btn class, else pause btn class\r\n        const playPauseBtnClass = isPaused? 'las la-play la-lg': 'las la-pause la-lg';\r\n\r\n        return (\r\n            //  JSX ===========================\r\n            <div className='timer' id='timer'>\r\n                <div className='timer-time' id='timer-time'>\r\n                <div className='timer-label' id='timer-label'> { timerState } </div>\r\n                    <div className='time-left' id='time-left'>{getTime(timerMin, timerSec, isMiddleColonShown)}</div>\r\n                </div>\r\n\r\n                <div className='timer-options' id='timer-options'>\r\n                    <button type='button' className='start_stop' id='start_stop' onClick={ this.playPauseBtnClicked } >\r\n                        <i className={ playPauseBtnClass } ></i>\r\n                    </button>\r\n                    <button type='button' className='reset' id='reset' onClick={this.resetBtnClicked } >\r\n                        <i className=\"las la-redo-alt la-lg\"></i>\r\n                    </button>\r\n                    <button type='button' className='timer-settings' id='timer-settings'>\r\n                        <i className=\"las la-tools la-lg\"></i>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            //  ===============================\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n//==========================================\r\n//  PROPTYPES AND MAP TO PROPS\r\n//==========================================\r\n\r\nTimer.propTypes = {\r\n    playPauseClicked: PropTypes.func.isRequired,\r\n    resetClicked: PropTypes.func.isRequired,\r\n    alarmChanged: PropTypes.func.isRequired,\r\n\r\n    timerState: PropTypes.string.isRequired,\r\n    timerMin: PropTypes.number.isRequired,\r\n    timerSec: PropTypes.number.isRequired,\r\n    isMiddleColonShown: PropTypes.bool.isRequired,\r\n    isPaused: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        timerState: store.timerState,\r\n        timerMin: store.timerMin,\r\n        timerSec: store.timerSec,\r\n        isMiddleColonShown: store.isMiddleColonShown,\r\n        isPaused: store.isPaused\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        playPauseClicked: ()=> {\r\n            dispatch( Actions.playPauseClick() );\r\n        },\r\n        resetClicked: ()=> {\r\n            dispatch( Actions.resetClick() );\r\n        },\r\n        alarmChanged: (alarmID)=> {\r\n            dispatch( Actions.alarmChanged(alarmID) );\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Timer);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport $ from 'jquery';\r\n\r\nimport Actions from '../Redux/Actions/Actions';\r\n\r\nimport padZeroes from '../PadZeroes';\r\n\r\n\r\n//  This function creates a new Option HTML element, to be put in select HTML element, based on the audioName and newID\r\n//  that shall be applied to the option element, passed in as argument\r\n\r\n//  This function is called when the application first loads, when reading the user-defined alarm sounds from Local Storage,\r\n//  and everytime user adds a new alarm sound\r\nfunction createOptionHTML( audioName, newID ) {\r\n    const newOptionHTML = $(`<option value=${newID}> ${audioName} </option>`);\r\n    return newOptionHTML;\r\n}\r\n\r\n\r\n\r\nclass ConfigWin extends React.Component {\r\n    constructor( props ) {\r\n        super(props);\r\n\r\n        this.volumeChanged = this.volumeChanged.bind(this);\r\n        this.breakLenChanged = this.breakLenChanged.bind(this);\r\n        this.sessionLenChanged = this.sessionLenChanged.bind(this);\r\n        this.alarmSoundChanged = this.alarmSoundChanged.bind(this);\r\n        this.alarmUploaded = this.alarmUploaded.bind(this);\r\n        this.alarmDelete = this.alarmDelete.bind(this);\r\n        this.alarmPlay = this.alarmPlay.bind(this);\r\n    }\r\n\r\n    //  When the component did mount:\r\n    //  >   Add event listener to close config window button\r\n    //  >   Read from Local Storage if there is user-defined alarm sounds. If there is, add option HTML into select HTML\r\n    componentDidMount() {\r\n        $('#close-config-btn').on('click', ()=> {\r\n            $('#config').removeClass('opened');\r\n        });\r\n\r\n        for (let i = 0; i < window.localStorage.length; i ++ ) {\r\n\r\n            const key = window.localStorage.key(i);\r\n            if (key <= 2 ) continue;\r\n\r\n            let audioJSON;\r\n            const entry = window.localStorage.getItem( key );\r\n            try {\r\n                audioJSON = JSON.parse( entry );\r\n            } catch (err) {\r\n                continue;\r\n            }\r\n            if (!audioJSON || !audioJSON.name) continue;\r\n\r\n            const optionHTML = createOptionHTML( audioJSON.name, i );\r\n\r\n            $('#alarm-sound').append(optionHTML);\r\n        }\r\n\r\n    }\r\n\r\n    volumeChanged(e) {\r\n        this.props.alarmVolChanged(e.target.value);\r\n    }\r\n\r\n    breakLenChanged(e) {\r\n        const { break_length, breakLenChanged } = this.props;\r\n\r\n        if (e.target.id === 'break-decrement' || e.target.id === 'break-decrement-logo') {\r\n            if (break_length <= 1) return;\r\n            breakLenChanged( break_length - 1 );\r\n        } else if (e.target.id === 'break-increment' || e.target.id === 'break-increment-logo') {\r\n            if (break_length >= 60) return;\r\n            breakLenChanged( break_length + 1 );\r\n        }\r\n    }\r\n\r\n    sessionLenChanged(e) {\r\n        const { session_length, sessionLenChanged } = this.props;\r\n\r\n        if (e.target.id === 'session-decrement' || e.target.id === 'session-decrement-logo') {\r\n            if (session_length <= 1) return;\r\n            sessionLenChanged( session_length - 1);\r\n        } else if (e.target.id === 'session-increment' || e.target.id === 'session-increment-logo') {\r\n            if (session_length >= 60) return;\r\n            sessionLenChanged( session_length + 1);\r\n        }\r\n    }\r\n\r\n\r\n    //  Called when the user uploads a file into the input file HTML element\r\n    alarmUploaded(e) {\r\n        const file = e.target.files[0];\r\n        //  No file or the file isn't of type audio\r\n        if (!file || !file.type.startsWith('audio') ) {\r\n            window.alert('Invald file selected.');\r\n            return;\r\n        }\r\n        //  The file uploaded is large. Reject it \r\n        if (file.size > 10485760) {\r\n            window.alert('The audio file exceeds 10MB! Please use a smaller audio file! (.mp3 files are usually smaller)');\r\n            return;\r\n        }\r\n\r\n        const fr = new FileReader();\r\n        //  Callback function. When loaded, get the next ID available, and add the audio to Local Storage as well as\r\n        //  add option to the Select HTML\r\n        fr.onload = () => {\r\n            const selectHTML = $('#alarm-sound');\r\n            const newID = Number(selectHTML.children('option:last-child')[0].value) + 1;\r\n\r\n            const audioJSONStr = JSON.stringify({ name: file.name, url: fr.result} );\r\n\r\n            try {\r\n                window.localStorage.setItem( newID , audioJSONStr);\r\n            } catch (err) {\r\n                //  The Local Storage has size limit of about 10MB. If this causes overload, then reject the file\r\n                window.alert(\"Sorry, but adding this file would result in Local Storage Overload. Consider deleting some alarm sounds first?\");\r\n                return;\r\n            }\r\n\r\n            //  Appending the new Option HTML element to the select HTML\r\n            const optionHTML = createOptionHTML( file.name, newID );\r\n            optionHTML.appendTo(selectHTML);\r\n            window.alert(\"Successful Added Alarm. Select new alarm at dropdown options!\");\r\n        }\r\n\r\n        fr.readAsDataURL(file);\r\n    }\r\n\r\n    //  User selected another alarm sound from Select HTML\r\n    alarmSoundChanged(e) {\r\n        this.props.alarmChanged(e.target.value);\r\n    }\r\n\r\n    alarmPlay(e) {\r\n        this.props.alarmHTML.play();\r\n    }\r\n\r\n    //  User wants to delete the selected alarm sound\r\n    alarmDelete(e) {\r\n        const selectHTML = $('#alarm-sound');\r\n        const ID = selectHTML[0].value;\r\n        const { alarmChanged } = this.props;\r\n\r\n        //  Default (Preloaded) alarm sounds shall not be deleted\r\n        if (ID < 3) {\r\n            window.alert('Please do not delete default alarm sounds!');\r\n            return;\r\n        }\r\n\r\n        //  Change the selected alarm sound to the first one, preloaded alarm sound\r\n        alarmChanged(0);\r\n        selectHTML[0].value = \"0\";\r\n\r\n        //  Remove the targeted Option HTML from Select HTML element\r\n        selectHTML.children(`[value='${ID}']`)[0].remove();\r\n\r\n        //  Remove the targeted alarm sound from Local Storage\r\n        window.localStorage.removeItem(ID);\r\n        \r\n    }\r\n\r\n    \r\n    render() {\r\n        const { alarmName, alarm_volume, break_length, session_length } = this.props;\r\n        const alarmJSON1 = JSON.parse( window.localStorage.getItem(0) );\r\n        const alarmJSON2 = JSON.parse( window.localStorage.getItem(1) );\r\n        const alarmJSON3 = JSON.parse( window.localStorage.getItem(2) );\r\n\r\n        return (\r\n        //  JSX =============================\r\n        <div className='config' id='config'>\r\n            <header className='config-head' id='config-head'>\r\n                <i className=\"las la-tools la-lg\"></i>\r\n                Settings\r\n                <button className='config-btn' id='close-config-btn'>\r\n                    <i className=\"las la-times la-lg\"></i>\r\n                </button>\r\n            </header>\r\n\r\n            <div className='config-body' id='config-body'>\r\n\r\n                <fieldset className='config-set' id='alarm'>\r\n                    <legend>ALARM</legend>\r\n\r\n                    <div className='config-wrapper'>\r\n                        <label htmlFor='alarm-loaded'>Current Loaded Alarm: </label>\r\n                        <span className='config-val' id='alarm-val'>\r\n                            { alarmName }\r\n                            <button type='button' className='config-btn' id='config-play-alarm' \r\n                                onClick={ this.alarmPlay }>\r\n                                <i className=\"las la-play la-lg\"></i>\r\n                            </button>\r\n                            <button type='button' className='config-btn' id='config-delete-alarm' \r\n                                onClick={ this.alarmDelete }>\r\n                                <i className=\"las la-trash-alt la-lg\"></i>\r\n                            </button>\r\n                            \r\n                        </span>\r\n\r\n                        <label htmlFor='alarm-sound'>Alarm Sound: </label>\r\n                        <select className='config-select' id='alarm-sound' defaultValue='0' onChange={ this.alarmSoundChanged }>\r\n                            <option value='0'> { alarmJSON1? alarmJSON1.name: '1' }</option>\r\n                            <option value='1' > { alarmJSON2? alarmJSON2.name: '2' } </option>\r\n                            <option value='2' > { alarmJSON3? alarmJSON3.name: '3' } </option>\r\n                        </select>\r\n\r\n                        <label htmlFor='alarm-upload'>Upload Alarm: </label>\r\n                        <input type='file' accept='audio/*' className='config-input-file' id='alarm-upload'\r\n                             onChange={ this.alarmUploaded }></input>\r\n                        <button type='button' className='config-btn' id='config-file-btn' \r\n                            onClick={ ()=> { $('#alarm-upload').trigger('click') } } >\r\n                            <i className=\"las la-file-upload\"></i> Upload...\r\n                        </button>\r\n\r\n                        <label htmlFor='alarm-volume'>Alarm Volume: \r\n                            <span className='config-val' id='alarm-volume-val'> { Math.round(alarm_volume * 100) } </span> \r\n                        </label>\r\n                        <input type='range' className='config-range' id='alarm-volume' min='0' max='1' \r\n                            step='0.01' value={ alarm_volume } onChange={ this.volumeChanged } ></input>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset className='config-set' id='time'>\r\n                    <legend>TIME</legend>\r\n\r\n                    <div className='config-wrapper'>\r\n\r\n                        <label htmlFor='break-length' id='break-label'>Break Length (Minutes): </label>\r\n                        <div className='btn-control'>\r\n                            <button type='button' className='config-btn' id='break-decrement' onClick={ this.breakLenChanged } >\r\n                                <i className=\"las la-chevron-left\" id='break-decrement-logo'></i>\r\n                            </button>\r\n                            <span className='config-val' id='break-length'> { `${padZeroes(break_length)}:00` } </span>\r\n                            <button type='button' className='config-btn' id='break-increment' onClick={ this.breakLenChanged }>\r\n                                <i className=\"las la-chevron-right\" id='break-increment-logo'></i>\r\n                            </button>\r\n                        </div>\r\n\r\n                        <label htmlFor='session-length' id='session-label'>Session Length (Minutes): </label>\r\n                        <div className='btn-control'>\r\n                            <button type='button' className='config-btn' id='session-decrement' onClick={ this.sessionLenChanged } >\r\n                                <i className=\"las la-chevron-left\" id='session-decrement-logo'></i>\r\n                            </button>\r\n                            <span className='config-val' id='session-length'> { `${padZeroes(session_length)}:00` } </span>\r\n                            <button type='button' className='config-btn' id='session-increment' onClick={ this.sessionLenChanged }>\r\n                                <i className=\"las la-chevron-right\" id='session-increment-logo'></i>\r\n                            </button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </fieldset>\r\n            </div>\r\n        </div>\r\n        //  ================================\r\n        );\r\n    }\r\n}\r\n\r\n//==========================================\r\n//  PROPTYPES AND MAP TO PROPS\r\n//==========================================\r\n\r\nConfigWin.propTypes = {\r\n    alarmName: PropTypes.string.isRequired,\r\n    alarmHTML: PropTypes.object.isRequired,\r\n    alarm_volume: PropTypes.number.isRequired,\r\n    break_length: PropTypes.number.isRequired,\r\n    session_length: PropTypes.number.isRequired,\r\n\r\n    alarmChanged: PropTypes.func.isRequired,\r\n    alarmVolChanged: PropTypes.func.isRequired,\r\n    breakLenChanged: PropTypes.func.isRequired,\r\n    sessionLenChanged: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps( store ) {\r\n    return {\r\n        alarmName: store.alarmName,\r\n        alarmHTML: store.alarmHTML,\r\n        alarm_volume: store.alarm_volume,\r\n\r\n        break_length: store.break_length,\r\n        session_length: store.session_length\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps( dispatch ) {\r\n    return {\r\n        alarmChanged: (alarmID) => {\r\n            dispatch( Actions.alarmChanged( alarmID ) );\r\n        },\r\n        alarmVolChanged: (alarmVol) => {\r\n            dispatch( Actions.alarmVolChanged( alarmVol ) );\r\n        },\r\n        breakLenChanged: (newBreakLength) => {\r\n            dispatch( Actions.breakLenChanged( newBreakLength ) );\r\n        },\r\n        sessionLenChanged: (newSessionLength) => {\r\n            dispatch( Actions.sessionLenChanged( newSessionLength) );\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigWin);","import React from 'react';\r\n\r\nimport MotivationQuote from './MotivationQuote';\r\nimport Note from './Note';\r\nimport Timer from './Timer';\r\nimport ConfigWin from './ConfigWin';\r\n\r\nclass Main extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        //  JSX ==================\r\n            <main className='main' id='main'>\r\n                <ConfigWin />\r\n                <MotivationQuote />\r\n\r\n                <div className='timer-and-note' id='timer-and-note'>\r\n                    <Note />\r\n                    <Timer />\r\n                </div>\r\n            </main>\r\n        // ========================\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport Store from './Redux/Store/Store';\nimport Main from './Components/Main';\n\nimport './Style/Style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store} >\n    <Main />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}